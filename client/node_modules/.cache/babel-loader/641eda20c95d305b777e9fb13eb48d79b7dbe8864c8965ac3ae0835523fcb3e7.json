{"ast":null,"code":"import { __assign, __awaiter, __generator, __spreadArray } from \"tslib\";\nimport { useEffect, useMemo, useState } from 'react';\nimport { MAX_QUERY_CHANNELS_LIMIT } from '../utils';\nimport { useChatContext } from '../../../context/ChatContext';\nexport var usePaginatedChannels = function (client, filters, sort, options, activeChannelHandler) {\n  var _a = useChatContext('usePaginatedChannels').channelsQueryState,\n    setError = _a.setError,\n    setQueryInProgress = _a.setQueryInProgress;\n  var _b = useState([]),\n    channels = _b[0],\n    setChannels = _b[1];\n  var _c = useState(true),\n    hasNextPage = _c[0],\n    setHasNextPage = _c[1];\n  // memoize props\n  var filterString = useMemo(function () {\n    return JSON.stringify(filters);\n  }, [filters]);\n  var sortString = useMemo(function () {\n    return JSON.stringify(sort);\n  }, [sort]);\n  var queryChannels = function (queryType) {\n    return __awaiter(void 0, void 0, void 0, function () {\n      var offset, newOptions, channelQueryResponse, newChannels, err_1;\n      var _a;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            setError(null);\n            if (queryType === 'reload') {\n              setChannels([]);\n              setQueryInProgress('reload');\n            } else {\n              setQueryInProgress('load-more');\n            }\n            offset = queryType === 'reload' ? 0 : channels.length;\n            newOptions = __assign({\n              limit: (_a = options === null || options === void 0 ? void 0 : options.limit) !== null && _a !== void 0 ? _a : MAX_QUERY_CHANNELS_LIMIT,\n              offset: offset\n            }, options);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, client.queryChannels(filters, sort || {}, newOptions)];\n          case 2:\n            channelQueryResponse = _b.sent();\n            newChannels = queryType === 'reload' ? channelQueryResponse : __spreadArray(__spreadArray([], channels, true), channelQueryResponse, true);\n            setChannels(newChannels);\n            setHasNextPage(channelQueryResponse.length >= newOptions.limit);\n            // Set active channel only on load of first page\n            if (!offset && activeChannelHandler) {\n              activeChannelHandler(newChannels, setChannels);\n            }\n            return [3 /*break*/, 4];\n          case 3:\n            err_1 = _b.sent();\n            console.warn(err_1);\n            setError(err_1);\n            return [3 /*break*/, 4];\n          case 4:\n            setQueryInProgress(null);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  var loadNextPage = function () {\n    queryChannels();\n  };\n  useEffect(function () {\n    queryChannels('reload');\n  }, [filterString, sortString]);\n  return {\n    channels: channels,\n    hasNextPage: hasNextPage,\n    loadNextPage: loadNextPage,\n    setChannels: setChannels\n  };\n};","map":{"version":3,"names":["__assign","__awaiter","__generator","__spreadArray","useEffect","useMemo","useState","MAX_QUERY_CHANNELS_LIMIT","useChatContext","usePaginatedChannels","client","filters","sort","options","activeChannelHandler","_a","channelsQueryState","setError","setQueryInProgress","_b","channels","setChannels","_c","hasNextPage","setHasNextPage","filterString","JSON","stringify","sortString","queryChannels","queryType","offset","newOptions","channelQueryResponse","newChannels","err_1","label","length","limit","trys","push","sent","console","warn","loadNextPage"],"sources":["C:/Users/praka/OneDrive/Desktop/Tic-Tac-Toe/client/node_modules/stream-chat-react/dist/components/ChannelList/hooks/usePaginatedChannels.js"],"sourcesContent":["import { __assign, __awaiter, __generator, __spreadArray } from \"tslib\";\nimport { useEffect, useMemo, useState } from 'react';\nimport { MAX_QUERY_CHANNELS_LIMIT } from '../utils';\nimport { useChatContext } from '../../../context/ChatContext';\nexport var usePaginatedChannels = function (client, filters, sort, options, activeChannelHandler) {\n    var _a = useChatContext('usePaginatedChannels').channelsQueryState, setError = _a.setError, setQueryInProgress = _a.setQueryInProgress;\n    var _b = useState([]), channels = _b[0], setChannels = _b[1];\n    var _c = useState(true), hasNextPage = _c[0], setHasNextPage = _c[1];\n    // memoize props\n    var filterString = useMemo(function () { return JSON.stringify(filters); }, [filters]);\n    var sortString = useMemo(function () { return JSON.stringify(sort); }, [sort]);\n    var queryChannels = function (queryType) { return __awaiter(void 0, void 0, void 0, function () {\n        var offset, newOptions, channelQueryResponse, newChannels, err_1;\n        var _a;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    setError(null);\n                    if (queryType === 'reload') {\n                        setChannels([]);\n                        setQueryInProgress('reload');\n                    }\n                    else {\n                        setQueryInProgress('load-more');\n                    }\n                    offset = queryType === 'reload' ? 0 : channels.length;\n                    newOptions = __assign({ limit: (_a = options === null || options === void 0 ? void 0 : options.limit) !== null && _a !== void 0 ? _a : MAX_QUERY_CHANNELS_LIMIT, offset: offset }, options);\n                    _b.label = 1;\n                case 1:\n                    _b.trys.push([1, 3, , 4]);\n                    return [4 /*yield*/, client.queryChannels(filters, sort || {}, newOptions)];\n                case 2:\n                    channelQueryResponse = _b.sent();\n                    newChannels = queryType === 'reload' ? channelQueryResponse : __spreadArray(__spreadArray([], channels, true), channelQueryResponse, true);\n                    setChannels(newChannels);\n                    setHasNextPage(channelQueryResponse.length >= newOptions.limit);\n                    // Set active channel only on load of first page\n                    if (!offset && activeChannelHandler) {\n                        activeChannelHandler(newChannels, setChannels);\n                    }\n                    return [3 /*break*/, 4];\n                case 3:\n                    err_1 = _b.sent();\n                    console.warn(err_1);\n                    setError(err_1);\n                    return [3 /*break*/, 4];\n                case 4:\n                    setQueryInProgress(null);\n                    return [2 /*return*/];\n            }\n        });\n    }); };\n    var loadNextPage = function () {\n        queryChannels();\n    };\n    useEffect(function () {\n        queryChannels('reload');\n    }, [filterString, sortString]);\n    return {\n        channels: channels,\n        hasNextPage: hasNextPage,\n        loadNextPage: loadNextPage,\n        setChannels: setChannels,\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}