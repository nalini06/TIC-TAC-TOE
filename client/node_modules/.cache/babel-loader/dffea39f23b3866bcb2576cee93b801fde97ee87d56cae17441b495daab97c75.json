{"ast":null,"code":"import { __assign } from \"tslib\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { ChannelPreviewMessenger } from './ChannelPreviewMessenger';\nimport { useIsChannelMuted } from './hooks/useIsChannelMuted';\nimport { useChannelPreviewInfo } from './hooks/useChannelPreviewInfo';\nimport { getLatestMessagePreview } from './utils';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nexport var ChannelPreview = function (props) {\n  var channel = props.channel,\n    _a = props.Preview,\n    Preview = _a === void 0 ? ChannelPreviewMessenger : _a,\n    channelUpdateCount = props.channelUpdateCount;\n  var _b = useChatContext('ChannelPreview'),\n    activeChannel = _b.channel,\n    client = _b.client,\n    setActiveChannel = _b.setActiveChannel;\n  var _c = useTranslationContext('ChannelPreview'),\n    t = _c.t,\n    userLanguage = _c.userLanguage;\n  var _d = useChannelPreviewInfo({\n      channel: channel\n    }),\n    displayImage = _d.displayImage,\n    displayTitle = _d.displayTitle;\n  var _e = useState(channel.state.messages[channel.state.messages.length - 1]),\n    lastMessage = _e[0],\n    setLastMessage = _e[1];\n  var _f = useState(0),\n    unread = _f[0],\n    setUnread = _f[1];\n  var isActive = (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid) === channel.cid;\n  var muted = useIsChannelMuted(channel).muted;\n  useEffect(function () {\n    var handleEvent = function (event) {\n      if (!event.cid) return setUnread(0);\n      if (channel.cid === event.cid) setUnread(0);\n    };\n    client.on('notification.mark_read', handleEvent);\n    return function () {\n      return client.off('notification.mark_read', handleEvent);\n    };\n  }, []);\n  var refreshUnreadCount = useCallback(function () {\n    if (isActive || muted) {\n      setUnread(0);\n    } else {\n      setUnread(channel.countUnread());\n    }\n  }, [channel, isActive, muted]);\n  useEffect(function () {\n    refreshUnreadCount();\n    var handleEvent = function (event) {\n      if (event.message) setLastMessage(event.message);\n      refreshUnreadCount();\n    };\n    channel.on('message.new', handleEvent);\n    channel.on('message.updated', handleEvent);\n    channel.on('message.deleted', handleEvent);\n    return function () {\n      channel.off('message.new', handleEvent);\n      channel.off('message.updated', handleEvent);\n      channel.off('message.deleted', handleEvent);\n    };\n  }, [refreshUnreadCount, channelUpdateCount]);\n  if (!Preview) return null;\n  var latestMessage = getLatestMessagePreview(channel, t, userLanguage);\n  return React.createElement(Preview, __assign({}, props, {\n    active: isActive,\n    displayImage: displayImage,\n    displayTitle: displayTitle,\n    lastMessage: lastMessage,\n    latestMessage: latestMessage,\n    setActiveChannel: setActiveChannel,\n    unread: unread\n  }));\n};","map":{"version":3,"names":["__assign","React","useCallback","useEffect","useState","ChannelPreviewMessenger","useIsChannelMuted","useChannelPreviewInfo","getLatestMessagePreview","useChatContext","useTranslationContext","ChannelPreview","props","channel","_a","Preview","channelUpdateCount","_b","activeChannel","client","setActiveChannel","_c","t","userLanguage","_d","displayImage","displayTitle","_e","state","messages","length","lastMessage","setLastMessage","_f","unread","setUnread","isActive","cid","muted","handleEvent","event","on","off","refreshUnreadCount","countUnread","message","latestMessage","createElement","active"],"sources":["C:/Users/praka/OneDrive/Desktop/Tic-Tac-Toe/client/node_modules/stream-chat-react/dist/components/ChannelPreview/ChannelPreview.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { ChannelPreviewMessenger } from './ChannelPreviewMessenger';\nimport { useIsChannelMuted } from './hooks/useIsChannelMuted';\nimport { useChannelPreviewInfo } from './hooks/useChannelPreviewInfo';\nimport { getLatestMessagePreview } from './utils';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nexport var ChannelPreview = function (props) {\n    var channel = props.channel, _a = props.Preview, Preview = _a === void 0 ? ChannelPreviewMessenger : _a, channelUpdateCount = props.channelUpdateCount;\n    var _b = useChatContext('ChannelPreview'), activeChannel = _b.channel, client = _b.client, setActiveChannel = _b.setActiveChannel;\n    var _c = useTranslationContext('ChannelPreview'), t = _c.t, userLanguage = _c.userLanguage;\n    var _d = useChannelPreviewInfo({ channel: channel }), displayImage = _d.displayImage, displayTitle = _d.displayTitle;\n    var _e = useState(channel.state.messages[channel.state.messages.length - 1]), lastMessage = _e[0], setLastMessage = _e[1];\n    var _f = useState(0), unread = _f[0], setUnread = _f[1];\n    var isActive = (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid) === channel.cid;\n    var muted = useIsChannelMuted(channel).muted;\n    useEffect(function () {\n        var handleEvent = function (event) {\n            if (!event.cid)\n                return setUnread(0);\n            if (channel.cid === event.cid)\n                setUnread(0);\n        };\n        client.on('notification.mark_read', handleEvent);\n        return function () { return client.off('notification.mark_read', handleEvent); };\n    }, []);\n    var refreshUnreadCount = useCallback(function () {\n        if (isActive || muted) {\n            setUnread(0);\n        }\n        else {\n            setUnread(channel.countUnread());\n        }\n    }, [channel, isActive, muted]);\n    useEffect(function () {\n        refreshUnreadCount();\n        var handleEvent = function (event) {\n            if (event.message)\n                setLastMessage(event.message);\n            refreshUnreadCount();\n        };\n        channel.on('message.new', handleEvent);\n        channel.on('message.updated', handleEvent);\n        channel.on('message.deleted', handleEvent);\n        return function () {\n            channel.off('message.new', handleEvent);\n            channel.off('message.updated', handleEvent);\n            channel.off('message.deleted', handleEvent);\n        };\n    }, [refreshUnreadCount, channelUpdateCount]);\n    if (!Preview)\n        return null;\n    var latestMessage = getLatestMessagePreview(channel, t, userLanguage);\n    return (React.createElement(Preview, __assign({}, props, { active: isActive, displayImage: displayImage, displayTitle: displayTitle, lastMessage: lastMessage, latestMessage: latestMessage, setActiveChannel: setActiveChannel, unread: unread })));\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}