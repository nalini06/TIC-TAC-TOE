{"ast":null,"code":"import { __assign } from \"tslib\";\nimport * as v1 from './FileIconSet/v1';\nimport * as v2 from './FileIconSet/v2';\nimport { archiveFileTypes, codeFileTypes, excelMimeTypes, powerpointMimeTypes, wordMimeTypes } from './mimeTypes';\nfunction generateMimeTypeToIconMap(_a) {\n  var FileArchiveIcon = _a.FileArchiveIcon,\n    FileCodeIcon = _a.FileCodeIcon,\n    FileExcelIcon = _a.FileExcelIcon,\n    FilePdfIcon = _a.FilePdfIcon,\n    FilePowerPointIcon = _a.FilePowerPointIcon,\n    FileWordIcon = _a.FileWordIcon;\n  var mimeTypeToIconMap = {\n    'application/pdf': FilePdfIcon\n  };\n  for (var _i = 0, wordMimeTypes_1 = wordMimeTypes; _i < wordMimeTypes_1.length; _i++) {\n    var type = wordMimeTypes_1[_i];\n    mimeTypeToIconMap[type] = FileWordIcon;\n  }\n  for (var _b = 0, excelMimeTypes_1 = excelMimeTypes; _b < excelMimeTypes_1.length; _b++) {\n    var type = excelMimeTypes_1[_b];\n    mimeTypeToIconMap[type] = FileExcelIcon;\n  }\n  for (var _c = 0, powerpointMimeTypes_1 = powerpointMimeTypes; _c < powerpointMimeTypes_1.length; _c++) {\n    var type = powerpointMimeTypes_1[_c];\n    mimeTypeToIconMap[type] = FilePowerPointIcon;\n  }\n  for (var _d = 0, archiveFileTypes_1 = archiveFileTypes; _d < archiveFileTypes_1.length; _d++) {\n    var type = archiveFileTypes_1[_d];\n    mimeTypeToIconMap[type] = FileArchiveIcon;\n  }\n  for (var _e = 0, codeFileTypes_1 = codeFileTypes; _e < codeFileTypes_1.length; _e++) {\n    var type = codeFileTypes_1[_e];\n    mimeTypeToIconMap[type] = FileCodeIcon;\n  }\n  return mimeTypeToIconMap;\n}\nfunction generateGeneralTypeToIconMap(_a) {\n  var FileAltIcon = _a.FileAltIcon,\n    FileAudioIcon = _a.FileAudioIcon,\n    FileImageIcon = _a.FileImageIcon,\n    FileVideoIcon = _a.FileVideoIcon;\n  return {\n    'audio/': FileAudioIcon,\n    'image/': FileImageIcon,\n    'text/': FileAltIcon,\n    'video/': FileVideoIcon\n  };\n}\nexport var iconMap = {\n  '1': {\n    alt: {},\n    standard: __assign(__assign(__assign({}, generateMimeTypeToIconMap({\n      FileArchiveIcon: v1.FileArchiveIcon,\n      FileCodeIcon: v1.FileCodeIcon,\n      FileExcelIcon: v1.FileExcelIcon,\n      FilePdfIcon: v1.FilePdfIcon,\n      FilePowerPointIcon: v1.FilePowerPointIcon,\n      FileWordIcon: v1.FileWordIcon\n    })), generateGeneralTypeToIconMap({\n      FileAltIcon: v1.FileAltIcon,\n      FileAudioIcon: v1.FileAudioIcon,\n      FileImageIcon: v1.FileImageIcon,\n      FileVideoIcon: v1.FileVideoIcon\n    })), {\n      fallback: v1.FileFallbackIcon\n    })\n  },\n  '2': {\n    alt: __assign(__assign(__assign({}, generateMimeTypeToIconMap({\n      FileArchiveIcon: v2.FileArchiveIconAlt,\n      FileCodeIcon: v2.FileCodeIconAlt,\n      FileExcelIcon: v2.FileExcelIconAlt,\n      FilePdfIcon: v2.FilePdfIcon,\n      FilePowerPointIcon: v2.FilePowerPointIconAlt,\n      FileWordIcon: v2.FileWordIconAlt\n    })), generateGeneralTypeToIconMap({\n      FileAltIcon: v2.FileFallbackIcon,\n      FileAudioIcon: v2.FileAudioIconAlt,\n      FileImageIcon: v2.FileImageIcon,\n      FileVideoIcon: v2.FileVideoIconAlt\n    })), {\n      fallback: v2.FileFallbackIcon\n    }),\n    standard: __assign(__assign(__assign({}, generateMimeTypeToIconMap({\n      FileArchiveIcon: v2.FileArchiveIcon,\n      FileCodeIcon: v2.FileCodeIcon,\n      FileExcelIcon: v2.FileExcelIcon,\n      FilePdfIcon: v2.FilePdfIcon,\n      FilePowerPointIcon: v2.FilePowerPointIcon,\n      FileWordIcon: v2.FileWordIcon\n    })), generateGeneralTypeToIconMap({\n      FileAltIcon: v2.FileFallbackIcon,\n      FileAudioIcon: v2.FileAudioIcon,\n      FileImageIcon: v2.FileImageIcon,\n      FileVideoIcon: v2.FileVideoIcon\n    })), {\n      fallback: v2.FileFallbackIcon\n    })\n  }\n};","map":{"version":3,"names":["__assign","v1","v2","archiveFileTypes","codeFileTypes","excelMimeTypes","powerpointMimeTypes","wordMimeTypes","generateMimeTypeToIconMap","_a","FileArchiveIcon","FileCodeIcon","FileExcelIcon","FilePdfIcon","FilePowerPointIcon","FileWordIcon","mimeTypeToIconMap","_i","wordMimeTypes_1","length","type","_b","excelMimeTypes_1","_c","powerpointMimeTypes_1","_d","archiveFileTypes_1","_e","codeFileTypes_1","generateGeneralTypeToIconMap","FileAltIcon","FileAudioIcon","FileImageIcon","FileVideoIcon","iconMap","alt","standard","fallback","FileFallbackIcon","FileArchiveIconAlt","FileCodeIconAlt","FileExcelIconAlt","FilePowerPointIconAlt","FileWordIconAlt","FileAudioIconAlt","FileVideoIconAlt"],"sources":["C:/Users/praka/OneDrive/Desktop/Tic-Tac-Toe/client/node_modules/stream-chat-react/dist/components/ReactFileUtilities/FileIcon/iconMap.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport * as v1 from './FileIconSet/v1';\nimport * as v2 from './FileIconSet/v2';\nimport { archiveFileTypes, codeFileTypes, excelMimeTypes, powerpointMimeTypes, wordMimeTypes, } from './mimeTypes';\nfunction generateMimeTypeToIconMap(_a) {\n    var FileArchiveIcon = _a.FileArchiveIcon, FileCodeIcon = _a.FileCodeIcon, FileExcelIcon = _a.FileExcelIcon, FilePdfIcon = _a.FilePdfIcon, FilePowerPointIcon = _a.FilePowerPointIcon, FileWordIcon = _a.FileWordIcon;\n    var mimeTypeToIconMap = {\n        'application/pdf': FilePdfIcon,\n    };\n    for (var _i = 0, wordMimeTypes_1 = wordMimeTypes; _i < wordMimeTypes_1.length; _i++) {\n        var type = wordMimeTypes_1[_i];\n        mimeTypeToIconMap[type] = FileWordIcon;\n    }\n    for (var _b = 0, excelMimeTypes_1 = excelMimeTypes; _b < excelMimeTypes_1.length; _b++) {\n        var type = excelMimeTypes_1[_b];\n        mimeTypeToIconMap[type] = FileExcelIcon;\n    }\n    for (var _c = 0, powerpointMimeTypes_1 = powerpointMimeTypes; _c < powerpointMimeTypes_1.length; _c++) {\n        var type = powerpointMimeTypes_1[_c];\n        mimeTypeToIconMap[type] = FilePowerPointIcon;\n    }\n    for (var _d = 0, archiveFileTypes_1 = archiveFileTypes; _d < archiveFileTypes_1.length; _d++) {\n        var type = archiveFileTypes_1[_d];\n        mimeTypeToIconMap[type] = FileArchiveIcon;\n    }\n    for (var _e = 0, codeFileTypes_1 = codeFileTypes; _e < codeFileTypes_1.length; _e++) {\n        var type = codeFileTypes_1[_e];\n        mimeTypeToIconMap[type] = FileCodeIcon;\n    }\n    return mimeTypeToIconMap;\n}\nfunction generateGeneralTypeToIconMap(_a) {\n    var FileAltIcon = _a.FileAltIcon, FileAudioIcon = _a.FileAudioIcon, FileImageIcon = _a.FileImageIcon, FileVideoIcon = _a.FileVideoIcon;\n    return {\n        'audio/': FileAudioIcon,\n        'image/': FileImageIcon,\n        'text/': FileAltIcon,\n        'video/': FileVideoIcon,\n    };\n}\nexport var iconMap = {\n    '1': {\n        alt: {},\n        standard: __assign(__assign(__assign({}, generateMimeTypeToIconMap({\n            FileArchiveIcon: v1.FileArchiveIcon,\n            FileCodeIcon: v1.FileCodeIcon,\n            FileExcelIcon: v1.FileExcelIcon,\n            FilePdfIcon: v1.FilePdfIcon,\n            FilePowerPointIcon: v1.FilePowerPointIcon,\n            FileWordIcon: v1.FileWordIcon,\n        })), generateGeneralTypeToIconMap({\n            FileAltIcon: v1.FileAltIcon,\n            FileAudioIcon: v1.FileAudioIcon,\n            FileImageIcon: v1.FileImageIcon,\n            FileVideoIcon: v1.FileVideoIcon,\n        })), { fallback: v1.FileFallbackIcon }),\n    },\n    '2': {\n        alt: __assign(__assign(__assign({}, generateMimeTypeToIconMap({\n            FileArchiveIcon: v2.FileArchiveIconAlt,\n            FileCodeIcon: v2.FileCodeIconAlt,\n            FileExcelIcon: v2.FileExcelIconAlt,\n            FilePdfIcon: v2.FilePdfIcon,\n            FilePowerPointIcon: v2.FilePowerPointIconAlt,\n            FileWordIcon: v2.FileWordIconAlt,\n        })), generateGeneralTypeToIconMap({\n            FileAltIcon: v2.FileFallbackIcon,\n            FileAudioIcon: v2.FileAudioIconAlt,\n            FileImageIcon: v2.FileImageIcon,\n            FileVideoIcon: v2.FileVideoIconAlt,\n        })), { fallback: v2.FileFallbackIcon }),\n        standard: __assign(__assign(__assign({}, generateMimeTypeToIconMap({\n            FileArchiveIcon: v2.FileArchiveIcon,\n            FileCodeIcon: v2.FileCodeIcon,\n            FileExcelIcon: v2.FileExcelIcon,\n            FilePdfIcon: v2.FilePdfIcon,\n            FilePowerPointIcon: v2.FilePowerPointIcon,\n            FileWordIcon: v2.FileWordIcon,\n        })), generateGeneralTypeToIconMap({\n            FileAltIcon: v2.FileFallbackIcon,\n            FileAudioIcon: v2.FileAudioIcon,\n            FileImageIcon: v2.FileImageIcon,\n            FileVideoIcon: v2.FileVideoIcon,\n        })), { fallback: v2.FileFallbackIcon }),\n    },\n};\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,KAAKC,EAAE,MAAM,kBAAkB;AACtC,OAAO,KAAKC,EAAE,MAAM,kBAAkB;AACtC,SAASC,gBAAgB,EAAEC,aAAa,EAAEC,cAAc,EAAEC,mBAAmB,EAAEC,aAAa,QAAS,aAAa;AAClH,SAASC,yBAAyBA,CAACC,EAAE,EAAE;EACnC,IAAIC,eAAe,GAAGD,EAAE,CAACC,eAAe;IAAEC,YAAY,GAAGF,EAAE,CAACE,YAAY;IAAEC,aAAa,GAAGH,EAAE,CAACG,aAAa;IAAEC,WAAW,GAAGJ,EAAE,CAACI,WAAW;IAAEC,kBAAkB,GAAGL,EAAE,CAACK,kBAAkB;IAAEC,YAAY,GAAGN,EAAE,CAACM,YAAY;EACpN,IAAIC,iBAAiB,GAAG;IACpB,iBAAiB,EAAEH;EACvB,CAAC;EACD,KAAK,IAAII,EAAE,GAAG,CAAC,EAAEC,eAAe,GAAGX,aAAa,EAAEU,EAAE,GAAGC,eAAe,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;IACjF,IAAIG,IAAI,GAAGF,eAAe,CAACD,EAAE,CAAC;IAC9BD,iBAAiB,CAACI,IAAI,CAAC,GAAGL,YAAY;EAC1C;EACA,KAAK,IAAIM,EAAE,GAAG,CAAC,EAAEC,gBAAgB,GAAGjB,cAAc,EAAEgB,EAAE,GAAGC,gBAAgB,CAACH,MAAM,EAAEE,EAAE,EAAE,EAAE;IACpF,IAAID,IAAI,GAAGE,gBAAgB,CAACD,EAAE,CAAC;IAC/BL,iBAAiB,CAACI,IAAI,CAAC,GAAGR,aAAa;EAC3C;EACA,KAAK,IAAIW,EAAE,GAAG,CAAC,EAAEC,qBAAqB,GAAGlB,mBAAmB,EAAEiB,EAAE,GAAGC,qBAAqB,CAACL,MAAM,EAAEI,EAAE,EAAE,EAAE;IACnG,IAAIH,IAAI,GAAGI,qBAAqB,CAACD,EAAE,CAAC;IACpCP,iBAAiB,CAACI,IAAI,CAAC,GAAGN,kBAAkB;EAChD;EACA,KAAK,IAAIW,EAAE,GAAG,CAAC,EAAEC,kBAAkB,GAAGvB,gBAAgB,EAAEsB,EAAE,GAAGC,kBAAkB,CAACP,MAAM,EAAEM,EAAE,EAAE,EAAE;IAC1F,IAAIL,IAAI,GAAGM,kBAAkB,CAACD,EAAE,CAAC;IACjCT,iBAAiB,CAACI,IAAI,CAAC,GAAGV,eAAe;EAC7C;EACA,KAAK,IAAIiB,EAAE,GAAG,CAAC,EAAEC,eAAe,GAAGxB,aAAa,EAAEuB,EAAE,GAAGC,eAAe,CAACT,MAAM,EAAEQ,EAAE,EAAE,EAAE;IACjF,IAAIP,IAAI,GAAGQ,eAAe,CAACD,EAAE,CAAC;IAC9BX,iBAAiB,CAACI,IAAI,CAAC,GAAGT,YAAY;EAC1C;EACA,OAAOK,iBAAiB;AAC5B;AACA,SAASa,4BAA4BA,CAACpB,EAAE,EAAE;EACtC,IAAIqB,WAAW,GAAGrB,EAAE,CAACqB,WAAW;IAAEC,aAAa,GAAGtB,EAAE,CAACsB,aAAa;IAAEC,aAAa,GAAGvB,EAAE,CAACuB,aAAa;IAAEC,aAAa,GAAGxB,EAAE,CAACwB,aAAa;EACtI,OAAO;IACH,QAAQ,EAAEF,aAAa;IACvB,QAAQ,EAAEC,aAAa;IACvB,OAAO,EAAEF,WAAW;IACpB,QAAQ,EAAEG;EACd,CAAC;AACL;AACA,OAAO,IAAIC,OAAO,GAAG;EACjB,GAAG,EAAE;IACDC,GAAG,EAAE,CAAC,CAAC;IACPC,QAAQ,EAAEpC,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEQ,yBAAyB,CAAC;MAC/DE,eAAe,EAAET,EAAE,CAACS,eAAe;MACnCC,YAAY,EAAEV,EAAE,CAACU,YAAY;MAC7BC,aAAa,EAAEX,EAAE,CAACW,aAAa;MAC/BC,WAAW,EAAEZ,EAAE,CAACY,WAAW;MAC3BC,kBAAkB,EAAEb,EAAE,CAACa,kBAAkB;MACzCC,YAAY,EAAEd,EAAE,CAACc;IACrB,CAAC,CAAC,CAAC,EAAEc,4BAA4B,CAAC;MAC9BC,WAAW,EAAE7B,EAAE,CAAC6B,WAAW;MAC3BC,aAAa,EAAE9B,EAAE,CAAC8B,aAAa;MAC/BC,aAAa,EAAE/B,EAAE,CAAC+B,aAAa;MAC/BC,aAAa,EAAEhC,EAAE,CAACgC;IACtB,CAAC,CAAC,CAAC,EAAE;MAAEI,QAAQ,EAAEpC,EAAE,CAACqC;IAAiB,CAAC;EAC1C,CAAC;EACD,GAAG,EAAE;IACDH,GAAG,EAAEnC,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEQ,yBAAyB,CAAC;MAC1DE,eAAe,EAAER,EAAE,CAACqC,kBAAkB;MACtC5B,YAAY,EAAET,EAAE,CAACsC,eAAe;MAChC5B,aAAa,EAAEV,EAAE,CAACuC,gBAAgB;MAClC5B,WAAW,EAAEX,EAAE,CAACW,WAAW;MAC3BC,kBAAkB,EAAEZ,EAAE,CAACwC,qBAAqB;MAC5C3B,YAAY,EAAEb,EAAE,CAACyC;IACrB,CAAC,CAAC,CAAC,EAAEd,4BAA4B,CAAC;MAC9BC,WAAW,EAAE5B,EAAE,CAACoC,gBAAgB;MAChCP,aAAa,EAAE7B,EAAE,CAAC0C,gBAAgB;MAClCZ,aAAa,EAAE9B,EAAE,CAAC8B,aAAa;MAC/BC,aAAa,EAAE/B,EAAE,CAAC2C;IACtB,CAAC,CAAC,CAAC,EAAE;MAAER,QAAQ,EAAEnC,EAAE,CAACoC;IAAiB,CAAC,CAAC;IACvCF,QAAQ,EAAEpC,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEQ,yBAAyB,CAAC;MAC/DE,eAAe,EAAER,EAAE,CAACQ,eAAe;MACnCC,YAAY,EAAET,EAAE,CAACS,YAAY;MAC7BC,aAAa,EAAEV,EAAE,CAACU,aAAa;MAC/BC,WAAW,EAAEX,EAAE,CAACW,WAAW;MAC3BC,kBAAkB,EAAEZ,EAAE,CAACY,kBAAkB;MACzCC,YAAY,EAAEb,EAAE,CAACa;IACrB,CAAC,CAAC,CAAC,EAAEc,4BAA4B,CAAC;MAC9BC,WAAW,EAAE5B,EAAE,CAACoC,gBAAgB;MAChCP,aAAa,EAAE7B,EAAE,CAAC6B,aAAa;MAC/BC,aAAa,EAAE9B,EAAE,CAAC8B,aAAa;MAC/BC,aAAa,EAAE/B,EAAE,CAAC+B;IACtB,CAAC,CAAC,CAAC,EAAE;MAAEI,QAAQ,EAAEnC,EAAE,CAACoC;IAAiB,CAAC;EAC1C;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}